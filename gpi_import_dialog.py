# -*- coding: utf-8 -*-
"""
/***************************************************************************
GPIImportDialog
                                 A QGIS plugin
 GPIImport
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-11
        git sha              : $Format:%H$
        copyright            : (C) 2019 by gerd 3er geoplaning GmbH
        email                : kontakt@geoplaning.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

import traceback


# MESSAGE_CATEGORY = 'Messages'

# Debuging Code vor VS Code
#def enable_remote_debugging():
#    try:
#        import ptvsd
#        if ptvsd.is_attached():
#            QgsMessageLog.logMessage("Remote Debug for Visual Code is already active", MESSAGE_CATEGORY, Qgis.Info)
#            return
#        ptvsd.enable_attach(address=('localhost', 5678))
#        QgsMessageLog.logMessage("Attached remote Debug for Visual Studio", MESSAGE_CATEGORY, Qgis.Info)
#    except Exception as e:
#        exc_type, exc_value, exc_traceback = sys.exc_info()
#        format_exception = traceback.format_exception(exc_type, exc_value, exc_traceback)
#        QgsMessageLog.logMessage(str(e), MESSAGE_CATEGORY, Qgis.Critical)        
#        QgsMessageLog.logMessage(repr(format_exception[0]), MESSAGE_CATEGORY, Qgis.Critical)
#        QgsMessageLog.logMessage(repr(format_exception[1]), MESSAGE_CATEGORY, Qgis.Critical)
#        QgsMessageLog.logMessage(repr(format_exception[2]), MESSAGE_CATEGORY, Qgis.Critical)
 


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gpi_import_dialog_base.ui'))


class GPIImportDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GPIImportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
